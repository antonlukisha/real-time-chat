{"ast":null,"code":"var _jsxFileName = \"C:\\\\RealTimeChat\\\\client\\\\src\\\\components\\\\MainWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LoginForm from './LoginForm';\nimport MessageInput from './MessageInput';\nimport MessageField from './MessageField';\nimport UserSearch from './UserSearch';\nimport NavigationHead from './NavigationHead';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nfunction MainWindow() {\n  _s();\n  // main functional\n  const [username, setUsername] = useState(''); // current username\n  const [channelName, setChannelName] = useState(''); // current chat\n  const [message, setMessage] = useState(''); // message from input\n  const [messages, setMessages] = useState([]); // state of messages from chat\n  const [userList, setUserList] = useState([]); // users\n  const [searchedMember, setSearchedMember] = useState(''); //searched member of chat\n  const [loginForm, setLoginForm] = useState(true);\n  useEffect(() => {\n    // actions after rendering\n    socket.on('join-user', user => {\n      // sub on event from server 'search-users-result'\n      setUserList(prevUser => [...prevUser, user]); // add user in the end of users list\n    });\n    socket.on('receive-message', data => {\n      // sub on event from server 'receive-message'\n      setMessages(prevMessages => [...prevMessages, `${data.username}: ${data.content} (${data.timestamp})`]);\n    });\n    socket.on('update-members', members => {\n      setUserList(members); // update members list\n    });\n    socket.on('update-message', messages => {\n      setMessages(messages); // update message\n    });\n    return () => {\n      // cansel all subs \n      socket.off('join-user');\n      socket.off('update-members');\n      socket.off('receive-message');\n      socket.off('update-message');\n    };\n  }, []);\n  const joinChannel = () => {\n    if (username && channelName) {\n      socket.emit('join-channel', {\n        channel_name: channelName,\n        username: username\n      });\n      setLoginForm(false); // hide login form\n    }\n  };\n  const sendMessage = () => {\n    if (message.trim() && channelName) {\n      // clear spaces around the message\n      console.log('connected to mongodb');\n      const data = {\n        content: message,\n        channel_name: channelName,\n        username\n      };\n      socket.emit('send-message', data); // send 'send-message' event to server\n      setMessage(''); // сlear input after sending\n    }\n  };\n  const searchUsers = () => {\n    if (searchedMember) {\n      socket.emit('search-users', searchedMember);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loginForm && /*#__PURE__*/_jsxDEV(LoginForm, {\n      username: username,\n      setUsername: setUsername,\n      setChannelName: setChannelName,\n      channelName: channelName,\n      joinChannel: joinChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), !loginForm && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavigationHead, {\n        searchedMember: searchedMember,\n        setSearchedMember: setSearchedMember,\n        userList: userList,\n        searchUsers: searchUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageField, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n_s(MainWindow, \"RTP+0ONjcAaIgPju1MkjeYcAWAs=\");\n_c = MainWindow;\nexport default MainWindow;\nvar _c;\n$RefreshReg$(_c, \"MainWindow\");","map":{"version":3,"names":["React","useState","useEffect","LoginForm","MessageInput","MessageField","UserSearch","NavigationHead","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","MainWindow","_s","username","setUsername","channelName","setChannelName","message","setMessage","messages","setMessages","userList","setUserList","searchedMember","setSearchedMember","loginForm","setLoginForm","on","user","prevUser","data","prevMessages","content","timestamp","members","off","joinChannel","emit","channel_name","sendMessage","trim","console","log","searchUsers","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/RealTimeChat/client/src/components/MainWindow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport LoginForm from './LoginForm';\r\nimport MessageInput from './MessageInput';\r\nimport MessageField from './MessageField';\r\nimport UserSearch from './UserSearch';\r\nimport NavigationHead from './NavigationHead';\r\nimport io from 'socket.io-client';\r\n\r\n\r\nconst socket = io('http://localhost:8000');\r\n\r\nfunction MainWindow() {\r\n\r\n  // main functional\r\n  const [username, setUsername] = useState(''); // current username\r\n  const [channelName, setChannelName] = useState(''); // current chat\r\n  const [message, setMessage] = useState(''); // message from input\r\n  const [messages, setMessages] = useState([]); // state of messages from chat\r\n  const [userList, setUserList] = useState([]); // users\r\n  const [searchedMember, setSearchedMember] = useState(''); //searched member of chat\r\n  const [loginForm, setLoginForm] = useState(true);\r\n\r\n  useEffect(() => { // actions after rendering\r\n    socket.on('join-user', (user) => { // sub on event from server 'search-users-result'\r\n      setUserList((prevUser) => [...prevUser, user]); // add user in the end of users list\r\n    });\r\n\r\n    socket.on('receive-message', (data) => { // sub on event from server 'receive-message'\r\n      setMessages((prevMessages) => [...prevMessages, `${data.username}: ${data.content} (${data.timestamp})`]);\r\n    });\r\n\r\n    socket.on('update-members', (members) => {\r\n      setUserList(members); // update members list\r\n    });\r\n\r\n    socket.on('update-message', (messages) => {\r\n      setMessages(messages); // update message\r\n    });\r\n    return () => { // cansel all subs \r\n      socket.off('join-user');\r\n      socket.off('update-members');\r\n      socket.off('receive-message');\r\n      socket.off('update-message');\r\n    };\r\n  }, []);\r\n\r\n  const joinChannel = () => {\r\n    if (username && channelName) {\r\n      socket.emit('join-channel', { channel_name: channelName, username: username });\r\n      setLoginForm(false); // hide login form\r\n    }\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    if (message.trim() && channelName) { // clear spaces around the message\r\n      console.log('connected to mongodb');\r\n      const data = {\r\n        content: message,\r\n        channel_name: channelName,\r\n        username,\r\n      };\r\n      socket.emit('send-message', data); // send 'send-message' event to server\r\n      setMessage(''); // сlear input after sending\r\n    }\r\n  };\r\n\r\n  const searchUsers = () => {\r\n    if (searchedMember) {\r\n      socket.emit('search-users', searchedMember);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      {loginForm && (\r\n        <LoginForm\r\n          username={username}\r\n          setUsername={setUsername}\r\n          setChannelName={setChannelName}\r\n          channelName={channelName}\r\n          joinChannel={joinChannel}\r\n        />\r\n      )}\r\n      {!loginForm && (\r\n        <>\r\n          <NavigationHead\r\n            searchedMember={searchedMember}\r\n            setSearchedMember={setSearchedMember}\r\n            userList={userList}\r\n            searchUsers={searchUsers}\r\n          />\r\n          <MessageField messages={messages} />\r\n          <MessageInput message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}